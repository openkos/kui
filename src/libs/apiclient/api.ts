/* tslint:disable */
/* eslint-disable */
/**
 * app/app.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AppApplication
 */
export interface AppApplication {
    /**
     * 
     * @type {string}
     * @memberof AppApplication
     */
    'uid'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppApplication
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppApplication
     */
    'intro'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppApplication
     */
    'image'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof AppApplication
     */
    'port'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof AppApplication
     */
    'config'?: string;
    /**
     * 
     * @type {string}
     * @memberof AppApplication
     */
    'depends'?: string;
}
/**
 * 
 * @export
 * @interface AppListResponse
 */
export interface AppListResponse {
    /**
     * 
     * @type {Array<AppApplication>}
     * @memberof AppListResponse
     */
    'items'?: Array<AppApplication>;
    /**
     * 
     * @type {string}
     * @memberof AppListResponse
     */
    'total'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AppOpRequestOperation = {
    Unspecified: 'OPERATION_UNSPECIFIED',
    Install: 'OPERATION_INSTALL',
    Uninstall: 'OPERATION_UNINSTALL',
    Upgrade: 'OPERATION_UPGRADE'
} as const;

export type AppOpRequestOperation = typeof AppOpRequestOperation[keyof typeof AppOpRequestOperation];


/**
 * 
 * @export
 * @enum {string}
 */

export const AppStatusRequestAppStatus = {
    Unspecified: 'APP_STATUS_UNSPECIFIED',
    Running: 'APP_STATUS_RUNNING',
    Stopped: 'APP_STATUS_STOPPED',
    Upgrading: 'APP_STATUS_UPGRADING'
} as const;

export type AppStatusRequestAppStatus = typeof AppStatusRequestAppStatus[keyof typeof AppStatusRequestAppStatus];


/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}
/**
 * 
 * @export
 * @interface SettingsListReply
 */
export interface SettingsListReply {
    /**
     * 
     * @type {string}
     * @memberof SettingsListReply
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface SettingsUpdateReply
 */
export interface SettingsUpdateReply {
    /**
     * 
     * @type {string}
     * @memberof SettingsUpdateReply
     */
    'message'?: string;
}

/**
 * AppServiceApi - axios parameter creator
 * @export
 */
export const AppServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appServiceList: async (name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/apps`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppServiceApi - functional programming interface
 * @export
 */
export const AppServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appServiceList(name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appServiceList(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppServiceApi - factory interface
 * @export
 */
export const AppServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appServiceList(name?: string, options?: any): AxiosPromise<AppListResponse> {
            return localVarFp.appServiceList(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppServiceApi - object-oriented interface
 * @export
 * @class AppServiceApi
 * @extends {BaseAPI}
 */
export class AppServiceApi extends BaseAPI {
    /**
     * 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppServiceApi
     */
    public appServiceList(name?: string, options?: AxiosRequestConfig) {
        return AppServiceApiFp(this.configuration).appServiceList(name, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SettingsServiceApi - axios parameter creator
 * @export
 */
export const SettingsServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsServiceList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsServiceApi - functional programming interface
 * @export
 */
export const SettingsServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingsServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsServiceList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsListReply>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsServiceList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SettingsServiceApi - factory interface
 * @export
 */
export const SettingsServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingsServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsServiceList(options?: any): AxiosPromise<SettingsListReply> {
            return localVarFp.settingsServiceList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingsServiceApi - object-oriented interface
 * @export
 * @class SettingsServiceApi
 * @extends {BaseAPI}
 */
export class SettingsServiceApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsServiceApi
     */
    public settingsServiceList(options?: AxiosRequestConfig) {
        return SettingsServiceApiFp(this.configuration).settingsServiceList(options).then((request) => request(this.axios, this.basePath));
    }
}


